@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Order Form</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>

    <style>
        .error {
            color: red;
            font-size: 0.875em;
        }
        .disabled {
            pointer-events: none ;
            background-color : #e9ecef ;
        }
        .able {
            pointer-events : none ;
            background-color :white;
        }
    </style>
</head>
<body>
    <div class="container mt-5">
        <h2>Order</h2>
        <form id="orderForm">
            <div class="row mb-3">
                <div class="col-md-6">
                    <label for="orderNo" class="form-label">Order No</label>
                    <input type="text" id="orderNo" class="form-control" onblur="validateField(this)">
                    <div id="orderNoError" class="error"></div>
                </div>
                <div class="col-md-6">
                    <label for="orderDate" class="form-label">Order Date</label>
                    <input type="date" id="orderDate" class="form-control" value="2019-06-11">
                </div>
            </div>
            <div class="row mb-3">
                <div class="col-md-6">
                    <label for="customerNo" class="form-label">Customer No</label>
                    <input type="text" id="customerNo" class="form-control" onblur="validateField(this)" oninput="print(this)">
                    <div id="customerNoError" class="error"></div>
                </div>
                <div class="col-md-6">
                    <label for="customerName" class="form-label">Customer Name</label>
                    <input type="text" id="customerName" class="form-control disabled">
                </div>
            </div>
            <div class="row mb-3">
                <div class="col-md-6">
                    <label for="accountNo" class="form-label" >Account No</label>
                    <input type="text" id="accountNo" class="form-control" onblur="validateField(this)" >
                    <div id="accountNoError" class="error"></div>
                </div>
                <div class="col-md-6">
                    <label for="accountName" class="form-label" >Account Name</label>
                    <input type="text" id="accountName" class="form-control disabled" >
                </div>
            </div>
            <div class="mb-3">
                <label for="orderStatus" class="form-label">Order Status</label>
                <input type="checkbox" id="orderStatus">
            </div>
            <div class="mb-3">
                <label for="description" class="form-label">Description</label>
                <textarea id="description" class="form-control"></textarea>
            </div>

            <h4>Order items</h4>
            <div id="orderItems">
                <div class="row mb-3">
                    <div class="col-md-3">
                        <label class="form-label">Category</label>
                        <select class="form-select" id="categorySelect">
                            <option>Select</option>
                            <option>Item1</option>
                            <option>Item2</option>
                        </select>
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">Product</label>
                        <select class="form-select" id="productSelect">
                            <option>Select</option>
                            <option>Product1</option>
                            <option>Product2</option>
                        </select>
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">Quantity</label>
                        <input type="number" class="form-control" id="quantityInput">
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">Price</label>
                        <input type="number" class="form-control" id="priceInput">
                    </div>
                    <div class="col-md-2 d-flex align-items-end">
                        <button type="button" class="btn btn-success w-100" onclick="addItem()">Add</button>
                    </div>
                </div>
            </div>

            <div id="itemsList"></div>
            <button type="submit" class="btn btn-warning">Save Order</button>
        </form>
    </div>
    <script>
        console.log("in")
        // Function to validate required fields
        function validateField(input) {
            const errorDiv = document.getElementById(input.id + "Error");
            if (input.value.trim() === "") {
                errorDiv.textContent = input.getAttribute("data-error") + " is required";
                return false;
            } else {
                errorDiv.textContent = "";
                return true;
            }
        }

        // Set data-error attributes for validation
        document.getElementById("orderNo").setAttribute("data-error", "Order no");
        document.getElementById("customerNo").setAttribute("data-error", "Customer no");
        document.getElementById("accountNo").setAttribute("data-error", "Account no");

        // Handle form submit validation
        document.getElementById("orderForm").addEventListener("submit", function (event) {
            event.preventDefault();

            let isValid = true;
            const requiredFields = ["orderNo", "customerNo", "accountNo"];

            requiredFields.forEach(function (fieldId) {
                const field = document.getElementById(fieldId);
                if (!validateField(field)) {
                    isValid = false;
                }
            });

            if (isValid) {
                alert("Form submitted successfully!");
            }
        });

        // Function to add item to the items list
        function addItem() {
            const category = document.getElementById('categorySelect').value;
            const product = document.getElementById('productSelect').value;
            const quantity = document.getElementById('quantityInput').value;
            const price = document.getElementById('priceInput').value;

            if (category === 'Select' || product === 'Select' || quantity === '' || price === '') {
                alert("Please fill all item details.");
                return;
            }

            const itemsList = document.getElementById('itemsList');

            const itemRow = document.createElement('div');
            itemRow.className = 'row mb-2 align-items-center';
            itemRow.innerHTML = `
                    <div class="col-md-3">
                        <input type="text" class="form-control" value="${category}" readonly>
                    </div>
                    <div class="col-md-3">
                        <input type="text" class="form-control" value="${product}" readonly>
                    </div>
                    <div class="col-md-2">
                        <input type="number" class="form-control" value="${quantity}" readonly>
                    </div>
                    <div class="col-md-2">
                        <input type="number" class="form-control" value="${price}" readonly>
                    </div>
                    <div class="col-md-2">
                        <button type="button" class="btn btn-danger w-100" onclick="removeItem(this)">Remove</button>
                    </div>
                `;
            itemsList.appendChild(itemRow);

            // Clear input fields after adding
            document.getElementById('categorySelect').value = 'Select';
            document.getElementById('productSelect').value = 'Select';
            document.getElementById('quantityInput').value = '';
            document.getElementById('priceInput').value = '';
        }

        // Function to remove item from the list
        function removeItem(button) {
            button.closest('.row').remove();
        }

        // Check if at least one item is added before submitting the form
        document.getElementById("orderForm").addEventListener("submit", function (event) {
            event.preventDefault();

            const itemsList = document.getElementById('itemsList').children;
            if (itemsList.length === 0) {
                alert("Please add at least one item.");
                return;
            }

            alert("Order saved successfully!");
        });
        // AJAX call to fetch customer name based on customer number
        function fetchCustomerName() {
            const customerNo = document.getElementById("customerNo").value;
            console.log(customerNo)

            if (customerNo) {
                console.log('in in')
                $.ajax({
                   // // https://localhost:44328/Customer/GetCustomerName?id=1
                        url: `/Customer/GetCustomerName?id=${customerNo}`,
                    type: 'GET',
                    success: function (response) {
                        console.log(`${response} : response`);

                        if (response) {
                            // Assuming response contains a 'customerName' field
                            $('#customerName').val(response.customerName);
                            $('#error-message').text('');
                            document.getElementById("customerName").value = response;
                        } else {
                            $('#customerName').val('');
                            $('#error-message').text('Customer not found');
                        }
                    },
                    error: function () {
                        $('#error-message').text('Error fetching customer name');
                    }
                });
            } else {
                $('#customerName').val('');
                $('#error-message').text('Customer number is required');
            }
        }

        // AJAX call to fetch account name based on account number
        function fetchAccountName() {
            const accountNo = document.getElementById("accountNo").value;

            if (accountNo) {
                $.ajax({
                    url: `/Account/GetAccountName/${accountNo}`, 
                    type: 'GET',
                    success: function (response) {
                        console.log(response);

                        if (response) {
                            $('#accountName').val(response.accountName);
                            $('#error-message').text('');
                        } else {
                            $('#accountName').val('');
                            $('#error-message').text('Account not found');
                        }
                    },
                    error: function () {
                        $('#error-message').text('Error fetching account name');
                    }
                });
            } else {
                $('#accountName').val('');
                $('#error-message').text('Account number is required');
            }
        }

        // Event listeners for customerNo and accountNo input changes
        document.getElementById("customerNo").addEventListener("input", function () {
            fetchCustomerName();
        });

    </script>


@*     //fet product when user enter category
 *@   
 <script>
        document.getElementById("fetchButton").addEventListener("click", () => {
            const categoryName = document.getElementById("categoryInput").value.trim();
            if (categoryName) {
                fetchProducts(categoryName);
            } else {
                alert("Please enter a category name.");
            }
        });

        async function fetchProducts(categoryName) {

         const url = `/Category/GetCategorytName/${accountNo}`; 

            try {
                const response = await fetch(url, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                if (!response.ok) {
                    throw new Error(`Failed to retrieve products: ${response.statusText}`);
                }

                const products = await response.json();
                populateDropdown(products);
            } catch (error) {
                console.error("Error fetching products:", error);
                alert("Error fetching products. Please check the console for more details.");
            }
        }

        function populateDropdown(products) {
            const dropdown = document.getElementById("productSelect");
            dropdown.innerHTML = '<option value="">-- Select a Product --</option>'; 

            products.forEach(product => {
                const option = document.createElement("option");
                option.value = product.ProductId;
                option.textContent = product.ProductName;
                dropdown.appendChild(option);
            });
        }
    </script>

</body>
</html>